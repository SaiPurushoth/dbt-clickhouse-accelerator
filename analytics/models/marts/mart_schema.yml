models:
  - name: dim_country
    description: "Country dimension with standardized country information"
    columns:
      - name: country_sk
        description: "Surrogate key for country dimension"
        tests:
          - unique
          - not_null
      
      - name: country_id
        description: "Natural key for country"
        tests:
          - unique
          - not_null
      
      - name: iso_country
        description: "ISO country code"
        tests:
          - not_null
      
      - name: iso_currency
        description: "ISO currency code"
        tests:
          - not_null
      
      - name: is_active
        description: "Active status flag"
        tests:
          - not_null
          - accepted_values:
              values: [true, false]
    
    tests:
      # Custom test: All countries should have valid region names
      - dbt_utils.expression_is_true:
          expression: "region_name IS NOT NULL AND LEN(TRIM(region_name)) > 0"
      # Custom test: ISO country code length should be 2
      - dbt_utils.expression_is_true:
          expression: "LEN(iso_country) = 2"
      # Custom test: ISO curency length should be 3
      - dbt_utils.expression_is_true:
          expression: "LEN(iso_currency) = 3"

  - name: dim_city
    description: "City dimension with country relationships and timezone data"
    columns:
      - name: city_sk
        description: "Surrogate key for city dimension"
        tests:
          - unique
          - not_null
      
      - name: city_id
        description: "Natural key for city"
        tests:
          - unique
          - not_null
      
      - name: country_sk
        description: "Foreign key to country dimension"
        tests:
          - not_null
          - relationships:
              to: ref('dim_country')
              field: country_sk
      
      - name: population
        description: "City population"
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 50000000  # Reasonable max for city population
              config:
                where: "population IS NOT NULL"
      
      - name: timezone
        description: "City timezone"
        tests:
          - not_null
          - accepted_values:
              values: ['America/New_York', 'America/Toronto', 'Europe/London', 'Europe/Paris', 'Europe/Berlin', 'Asia/Tokyo', 'Australia/Sydney', 'UTC']
    
    tests:
      # Custom test: City names should be non-empty
      - dbt_utils.expression_is_true:
          expression: "city_name IS NOT NULL AND LEN(TRIM(city_name)) > 0"

  - name: dim_location
    description: "Location dimension with business potential scoring"
    columns:
      - name: location_sk
        description: "Surrogate key for location dimension"
        tests:
          - unique
          - not_null
      
      - name: location_id
        description: "Natural key for location"
        tests:
          - unique
          - not_null
      
      - name: location_type
        description: "Type of location"
        tests:
          - accepted_values:
              values: ['Downtown', 'Business District', 'University', 'Market', 'Park', 'Event', 'Other']
      
      - name: estimated_foot_traffic
        description: "Expected foot traffic level"
        tests:
          - accepted_values:
              values: ['High', 'Medium', 'Low']
      
      - name: business_potential_score
        description: "Calculated business potential score"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100
      
      - name: iso_country_code
        description: "ISO country code"
        tests:
          - not_null
    
    tests:
      # Custom test: Business potential score logic validation
      - dbt_utils.expression_is_true:
          expression: >
            (location_type = 'Downtown' AND estimated_foot_traffic = 'High' AND business_potential_score = 95) OR
            (location_type = 'Business District' AND estimated_foot_traffic = 'High' AND business_potential_score = 90) OR
            business_potential_score IN (60, 70, 75, 80, 85)
      # Custom test: ISO Country Code length should be 2
      - dbt_utils.expression_is_true:
            expression: "LEN(iso_country_code) = 2"

  - name: dim_franchise
    description: "Franchise dimension with profile completeness metrics"
    columns:
      - name: franchise_sk
        description: "Surrogate key for franchise dimension"
        tests:
          - unique
          - not_null
      
      - name: franchise_id
        description: "Natural key for franchise"
        tests:
          - unique
          - not_null
      
      - name: profile_completeness
        description: "Franchise profile completeness level"
        tests:
          - not_null
          - accepted_values:
              values: ['Complete Profile', 'Basic Profile', 'Incomplete Profile']
      
      - name: has_complete_name
        description: "Name completeness flag"
        tests:
          - not_null
          - accepted_values:
              values: [true, false]
      
      - name: has_valid_email
        description: "Email validity flag"
        tests:
          - not_null
          - accepted_values:
              values: [true, false]
    
    tests:
      # Custom test: Profile completeness logic consistency
      - dbt_utils.expression_is_true:
          expression: >
            (profile_completeness = 'Complete Profile' AND has_complete_name = TRUE AND has_valid_email = TRUE) OR
            (profile_completeness = 'Basic Profile' AND has_complete_name = TRUE AND has_valid_email = FALSE) OR
            (profile_completeness = 'Incomplete Profile' AND has_complete_name = FALSE)

  - name: dim_truck
    description: "Truck dimension with franchise relationships and operational metrics"
    columns:
      - name: truck_sk
        description: "Surrogate key for truck dimension"
        tests:
          - unique
          - not_null
      
      - name: truck_id
        description: "Natural key for truck"
        tests:
          - unique
          - not_null
      
      - name: franchise_sk
        description: "Foreign key to franchise dimension (nullable for company-owned)"
        tests:
          - relationships:
              to: ref('dim_franchise')
              field: franchise_sk
              config:
                where: "franchise_sk != '-1'"
      
      - name: sustainability_score
        description: "Environmental sustainability score"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100
      
      - name: operational_category
        description: "Operational maturity classification"
        tests:
          - not_null
          - accepted_values:
              values: ['Established Performer', 'Growing Operation', 'New Launch', 'Pre-Launch', 'Inactive']
      
      - name: vehicle_year
        description: "Vehicle manufacturing year"
        tests:
          - dbt_utils.accepted_range:
              min_value: 1900
              max_value: 2030  # Allow for future years
              config:
                where: "vehicle_year IS NOT NULL"
      
      - name: is_electric_vehicle
        description: "Electric vehicle flag"
        tests:
          - not_null
          - accepted_values:
              values: [true, false]
    
    tests:
      # Custom test: Electric vehicles should have highest sustainability score
      - dbt_utils.expression_is_true:
          expression: "is_electric_vehicle = FALSE OR sustainability_score = 100"

  - name: dim_customer
    description: "Customer dimension with segmentation and value metrics"
    columns:
      - name: customer_sk
        description: "Surrogate key for customer dimension"
        tests:
          - unique
          - not_null
      
      - name: customer_id
        description: "Natural key for customer"
        tests:
          - unique
          - not_null
      
      - name: customer_segment
        description: "RFM-based customer segment"
        tests:
          - not_null
          - accepted_values:
              values: ['VIP', 'Loyal', 'Regular', 'At Risk', 'New', 'Churned', 'Occasional']
      
      - name: customer_value_tier
        description: "Customer value classification"
        tests:
          - not_null
          - accepted_values:
              values: ['High Value', 'Medium Value', 'Low Value', 'Minimal Value']
      
      - name: communication_preference
        description: "Preferred communication channel"
        tests:
          - not_null
          - accepted_values:
              values: ['Digital Only', 'Digital Preferred', 'Multi-Channel', 'Traditional Preferred']
      
      - name: estimated_lifetime_value
        description: "Customer lifetime value estimate"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 10000
      
      - name: age
        description: "Customer age"
        tests:
          - dbt_utils.accepted_range:
              min_value: 13  # Minimum reasonable age
              max_value: 120  # Maximum reasonable age
              config:
                where: "age IS NOT NULL"
    
    tests:
      # Custom test: Customer value tier alignment with LTV
      - dbt_utils.expression_is_true:
          expression: >
            (customer_value_tier = 'High Value' AND estimated_lifetime_value >= 500) OR
            (customer_value_tier = 'Medium Value' AND estimated_lifetime_value >= 200 AND estimated_lifetime_value < 500) OR
            (customer_value_tier = 'Low Value' AND estimated_lifetime_value >= 50 AND estimated_lifetime_value < 200) OR
            (customer_value_tier = 'Minimal Value' AND estimated_lifetime_value < 50)

  - name: dim_menu_item
    description: "Menu item dimension with profitability and optimization metrics"
    columns:
      - name: menu_item_sk
        description: "Surrogate key for menu item dimension"
        tests:
          - unique
          - not_null
      
      - name: menu_item_id
        description: "Natural key for menu item"
        tests:
          - unique
          - not_null
      
      - name: sale_price_usd
        description: "Menu item sale price"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0.50
              max_value: 100  # Reasonable range for food items
      
      - name: cost_of_goods_usd
        description: "Cost of goods for menu item"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0.10
              max_value: 50
      
      - name: menu_matrix_classification
        description: "BCG matrix-style menu classification"
        tests:
          - not_null
          - accepted_values:
              values: ['Star', 'Cash Cow', 'Loss Leader', 'Dog', 'Question Mark']
      
      - name: dietary_options_score
        description: "Count of dietary accommodations"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 3  # Max of vegan + vegetarian + gluten-free
      
      - name: calories
        description: "Calorie content"
        tests:
          - dbt_utils.accepted_range:
              min_value: 50
              max_value: 2000  # Reasonable range for food items
              config:
                where: "calories IS NOT NULL"
    
    tests:
      # Custom test: Cost should be less than sale price for profitable items
      - dbt_utils.expression_is_true:
          expression: "cost_of_goods_usd < sale_price_usd"
          config:
            where: "profit_margin_pct > 0"

  # ==============================================
  # FACT TABLE TESTS
  # ==============================================
  
  - name: fact_order
    description: "Order fact table with all dimensional relationships"
    columns:
      - name: order_sk
        description: "Surrogate key for order fact"
        tests:
          - unique
          - not_null
      
      - name: order_id
        description: "Natural key for order"
        tests:
          - unique
          - not_null
      
      - name: truck_sk
        description: "Foreign key to truck dimension"
        tests:
          - not_null
          - relationships:
              to: ref('dim_truck')
              field: truck_sk
              config:
                where: "truck_sk != '-1'"
      
      - name: customer_sk
        description: "Foreign key to customer dimension"
        tests:
          - relationships:
              to: ref('dim_customer')
              field: customer_sk
              config:
                where: "customer_sk != '-1'"
      
      - name: location_sk
        description: "Foreign key to location dimension"
        tests:
          - relationships:
              to: ref('dim_location')
              field: location_sk
              config:
                where: "location_sk != '-1'"
      
      - name: order_total
        description: "Total order amount"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 1000
      
      - name: order_profit_margin_pct
        description: "Order profit margin percentage"
        tests:
          - dbt_utils.accepted_range:
              min_value: -100
              max_value: 100
      
      - name: processing_time_minutes
        description: "Order processing time"
        tests:
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 120  # 2 hours max reasonable processing time
              config:
                where: "processing_time_minutes IS NOT NULL"
      
      - name: order_channel
        description: "Order channel"
        tests:
          - not_null
          - accepted_values:
              values: ['Mobile App', 'Walk-up', 'Online', 'Phone', 'Kiosk', 'Other']
      
      - name: meal_period
        description: "Meal period classification"
        tests:
          - not_null
          - accepted_values:
              values: ['Breakfast', 'Lunch', 'Snack', 'Dinner', 'Late Night']
    
    tests:
      # Custom test: Order financial components should balance
      - dbt_utils.expression_is_true:
          expression: "ABS(order_total - (order_amount + order_tax_amount - order_discount_amount)) <= 0.05"
          config:
            severity: warn
      
      # Custom test: Order profit calculation accuracy
      - dbt_utils.expression_is_true:
          expression: "ABS(order_profit - (order_total - total_cost_of_goods)) <= 0.05"
          config:
            where: "total_cost_of_goods IS NOT NULL"

  - name: fact_order_detail
    description: "Order detail fact table with line-level metrics"
    columns:
      - name: order_detail_sk
        description: "Surrogate key for order detail fact"
        tests:
          - unique
          - not_null
      
      - name: order_detail_id
        description: "Natural key for order detail"
        tests:
          - unique
          - not_null
      
      - name: order_sk
        description: "Foreign key to order fact"
        tests:
          - not_null
          - relationships:
              to: ref('fact_order')
              field: order_sk
              config:
                where: "order_sk != '-1'"
      
      - name: menu_item_sk
        description: "Foreign key to menu item dimension"
        tests:
          - not_null
          - relationships:
              to: ref('dim_menu_item')
              field: menu_item_sk
              config:
                where: "menu_item_sk != '-1'"
      
      - name: quantity
        description: "Quantity ordered"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 1
              max_value: 99
      
      - name: unit_price
        description: "Price per unit"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 100
      
      - name: net_line_total
        description: "Net line total after discounts"
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 500  # Reasonable max for line item
      
      - name: line_profit_margin_pct
        description: "Line-level profit margin"
        tests:
          - dbt_utils.accepted_range:
              min_value: -100
              max_value: 100
      
      - name: is_valid_line_item
        description: "Data quality validation flag"
        tests:
          - not_null
          - accepted_values:
              values: [true, false]
    
    tests:
      # Custom test: Line profit calculation accuracy
      - dbt_utils.expression_is_true:
          expression: "ABS(line_profit - (net_line_total - line_cost_of_goods)) <= 0.01"
          config:
            where: "is_valid_line_item = TRUE"
      
      # Custom test: Only valid line items should be in fact table
      - dbt_utils.expression_is_true:
          expression: "is_valid_line_item = TRUE"